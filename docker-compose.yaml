version: "3.9"
services:
  db:
    build: DB
    container_name: db
    stdin_open: true
    tty: true
    restart: unless-stopped
    volumes:
      - db-data:/db
        
  ngrok:
    container_name: ngrok
    image: ngrok/ngrok:alpine 
    command: 'http --authtoken ${ngrokAuthToken} host.docker.internal:5000'
    restart: on-failure
    ports:
      - '4040:4040'
    expose:
      - '4040'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    network_mode: "host"
    profiles: ["debug"]
    healthcheck:
      test: curl -sS http://host.docker.internal:4040 || echo 1
      interval: 3s
      timeout: 5s
      retries: 30
      start_period: 60s
      
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: on-failure
    network_mode: "host"
    profiles: [ "prod" ]
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./Nginx/certs/key.pem:/root/ssl/key.pem
      - ./Nginx/certs/cert.pem:/root/ssl/cert.pem
    ports:
      - '443:443'
    expose:
      - '443'
    environment:
      - NGINX_HOST=your_host_address.com #set your host address 
      - NGINX_PORT=443                   #set your port (80, 88, 443, 8443)

  web:
    build: KAIFreeAudiencesBot
    container_name: web
    restart: on-failure
    volumes:
      - db-data:/db
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    ports:
      - "5000:5000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    network_mode: "host"
    depends_on:
      #You need to manually include these lines when using ngrok
      #ngrok:
      #  condition: service_healthy
      nginx:
        condition: service_started
      db:
        condition: service_started
      
        
  parser:
    build: KAIScheduleParser
    container_name: parser
    tty: true
    volumes:
      - db-data:/db
    command: python3 parser.py -g -l
    depends_on:
      db:
        condition: service_started
        
volumes:
  db-data:
    name: db-data